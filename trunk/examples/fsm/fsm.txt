
Scripts are a direct implementation of a Finite state machine

each state has a set of rules in the form of:


"pattern" = "replacement" -> state ;

A state is introduced by its name:


[state1]

 "A" = "a" $v -> s2 ;

The patterns BEGIN and END match when entering/exiting a state
The pattern EOF matches the end of text

There are 26 string variable named $a-$z

Captures in the pattern are treated as variables $0-$9

The following functions are implemented

@set(a,b)     - set a to b
@add(a,b)     - set a to a+b
@sub(a,b)     - set a to a-b
@div(a,b)     - set a to a/b
@mul(a,b)     - set a to a*b
@mod(a,b)     - set a to a%b
@cat(a,b)     - append b to a

@mid(a,b,i,j) - set a to the substring of b from i to j (inclusive)
@len(a,b)     - set a to the length of b

@lnm(a)       - set a to the current input line number
 
@ret(a)       - exit from the current state
@clr          - clear all the accumulated text

@if(x op y, b, c)


script = state*

state = "[" state_name "]" rule*

rule  = "\"" pattern "\"" replace? next_state? ";"

nextsate = "->" state_name

replace = "=" (value | func)+

value = "$" var_name | $ DIGIT | STRING | NUMBER

func = add | sub | cat | set | div | mul | mod

add = "@add" "(" var_name, value ")"
sub = "@sub" "(" var_name, value ")"
set = "@set" "(" var_name, value ")"
div = "@div" "(" var_name, value ")"
mul = "@mul" "(" var_name, value ")"
mod = "@mod" "(" var_name, value ")"
cat = "@cat" "(" var_name, value ")"

sif = "@if" "(" value op value "," func ("," func)? ")"
op = "=" | "<" | ">" | "<=" | ">=" | "<>"
