static unsigned char *T1 =
        "\xF2\x47\x6F\xFC\x43\xE1\x54\x31\x7A\x67\xE8\xBE\x92\xF0\x85\xA9"
        "\x87\x34\x7C\xDF\x1E\xB1\xFE\x59\xFF\x7D\xD0\x83\x6E\x12\x3E\x8E"
        "\x22\x91\x81\x58\x86\x93\x30\x6C\x80\x7E\x75\x42\xDA\xF1\x20\xB0"
        "\x37\x6A\xEE\xDC\xED\x04\x38\xE9\x62\x97\xF7\x2F\x17\x0D\x3C\x2D"
        "\x49\xA6\x66\x0F\x5A\xDD\x44\x28\x39\x4E\x8C\xF6\xFD\xD5\xDB\x70"
        "\xEF\xFB\xB6\x63\x77\xD7\xBA\x3D\x36\x95\xB5\x53\x06\x2A\xC9\x9F"
        "\x9C\x6D\x4C\x23\xD1\xC5\x3F\x72\x52\xC7\x48\x8B\x46\xAE\xBB\x33"
        "\xAA\xF5\x05\xC1\x1F\xE4\xCA\x15\xE7\xB9\x9E\xCC\xE3\x71\xB3\x4F"
        "\xFA\xA7\x4B\x79\xA3\x45\xD9\x03\x35\xD6\x0B\xAC\x6B\x5E\x73\xA0"
        "\x41\x74\x10\x64\xA8\x65\x0E\xAF\x8F\x24\x13\x25\x90\x26\x08\x88"
        "\x8D\x5C\xF4\xF9\xEC\x9D\x57\x2E\xE5\x01\xCF\xA1\x5F\x76\x1D\xB2"
        "\x69\x27\xB7\x16\xD2\xB8\xAB\x09\xCE\x2C\xCD\x94\xF3\x14\xE6\x21"
        "\x40\xC2\x18\xF8\xC3\x1B\x7B\x7F\xA4\x9B\x5D\xDE\x98\xE0\x4D\xC4"
        "\x68\x2B\xEA\x8A\xB4\x0C\x19\x84\x32\x11\xC0\xBC\x4A\x3A\x89\xD4"
        "\xD8\x1C\xBD\x51\x00\x29\xA2\xCB\x1A\xD3\x9A\xBF\xC6\xEB\x5B\x78"
        "\x55\x96\x99\xA5\x50\xE2\x61\x60\xC8\x56\x0A\x82\x02\x07\x3B\xAD";

static unsigned char *T2 =
        "\xE9\x43\xDF\x60\x86\x1F\x4B\xBA\x40\xE5\xC4\xA5\x98\xAE\x93\x82"
        "\x0E\x10\x3E\xC1\x35\xA1\x69\xF1\x00\x65\x18\xE7\xA6\xD1\x81\x8D"
        "\x97\xE3\x9B\xFC\xCE\xF5\x1E\xB0\x83\x88\x2D\xC9\xB2\x85\x75\xF9"
        "\x4F\xBE\xB8\x67\xA3\x4A\xCB\xCA\x90\x12\xEA\x8F\x13\x27\x1D\xD2"
        "\x6F\x77\x61\x79\x74\x7C\x9F\x06\x04\x73\x6C\x6A\x0B\x08\xDA\x99"
        "\x51\xD5\x22\xDD\xF4\xCF\xA2\x42\xAA\xAF\x59\xED\x23\xAC\xC2\xDE"
        "\x4E\xA7\x5B\x92\xF0\x84\x02\x07\xCC\xB5\xDB\xFF\xC6\x9E\x7D\xE1"
        "\x58\x49\x1A\xC7\x21\x5C\x39\x94\x9C\xB3\x87\x3A\x11\x72\xFB\xC3"
        "\x2F\x16\xE0\xE6\xBF\x0F\x26\x41\x7F\x6E\x01\x8E\x14\x7B\xF8\x3F"
        "\x64\x57\x62\x55\x80\x76\x96\x25\xD3\x09\x52\x45\xD0\x0C\x4C\x0D"
        "\xF3\xAB\x50\x6D\x4D\xA8\x5E\x78\xF2\x0A\x30\x5F\x8C\xC8\x03\x7A"
        "\x38\xE8\x71\x44\xE2\x95\x1B\x15\xA0\x24\xDC\x19\xEC\x1C\x5A\xA4"
        "\x70\x05\xD9\x33\x28\xF6\xD4\x2C\xF7\xEB\x53\x6B\x56\x3B\xD7\xB1"
        "\x9D\xAD\x31\xBD\xBC\xA9\x5D\x34\x2A\x37\xFD\x3D\x8B\x29\xB7\xEF"
        "\xFE\xC0\x91\x36\xE4\x2E\xB4\xC5\x20\xBB\xCD\x8A\x63\x48\x54\xFA"
        "\x89\x47\x9A\x17\xB9\x46\x68\x3C\xB6\x7E\xEE\xD8\x32\x66\xD6\x2B";

typedef struct tbt_node_s {
  unsigned char flg[2];  /* flags are used to store the type of key/value*/
  uint16_t pri
  val_u  val;  /*  stored value */
  val_u  key;  /*  slot key */
  struct tbt_node_s *left;
  struct tbt_node_s *right;
} tbt_node_t;    

typedef struct {
  long count;
  tbt_node_t *root;
  tbt_node_t *free;
} * tbt_t;


tbt_t tbt_new(void) 
{
   tbt_t tree;
   tree = malloc sizeof(*root);
   if (root) {
     tree->count = 0;
     tree->root = NULL;
     tree->free = NULL;
   }
   return tree;
}

val_u tbt_get(tbt_t tb, char tk, long nkey, void *pkey, float fkey,
                        char tv, long ndef, void *pdef, float fdef)
{
  tbt_node_t *curnode;
  tbt_node_t *parent = NULL;
  val_u val;
  uint16_t pri;
    
  if (tb) {
    curnode = tb->root;
    while (curnode) {
      curpri = keypri(curnode);
      if (curpri == newpri) {
         if (val_cmp()
      }
      else if (curpri < newpri) {
        curnode = curnode->left;
      }
      else {
        curnode = curnode->right;
      }
    }
    if (cur_node) return cur_node->val;
  }
  val_set(val,tv,ndef,pdef,fdef);
  return val; 
}
